// Темы:
// Перегрузка операторов.
// Встроенные объекты 

//#include "stdafx.h"	//если Вы используете предкомпиляцию заголовочных файлов, раскомментируйте эту строчку
#include "myString.h"
#include "Point.h"
#include <iostream>
#include <tchar.h>
#include "BD.h"
#include "MyData.h"

#define	  stop __asm nop

int _tmain(int argc, _TCHAR* argv[])
{
	setlocale(LC_ALL, "Russian");


	//Задание 1.Перегрузка операторов.

	//Подключите к проекту файлы MyString.cpp и MyString.h
	//класса MyString, разработанного Вами на предыдущем занятии
	//9a. Перегрузите оператор присваивания для класса MyString
	//Проверьте корректность работы перегруженного оператора

	{
		std::cout << "===========================================================\nЗадание 1.\n";
		MyString s1("AAA"), s2;
		s2=s1;
		s1="CCC";
		s2= MyString("tmp");
		s1=s1;
		stop
	}



	//Создайте класс Point, который будет содержать координаты
	//"точки". Объявите конструктор (конструкторы) класса   

	//1b. "Перегрузите" оператор += так, чтобы при выполнении
	//операции типа pt2+=pt1; складывались
	//одноименные переменные объектов pt1 и pt2, а сумма
	//присваивалась соответствующим переменным объекта pt2 или
	// в случае  pt2+=1; обе переменные объекта pt2 увеличивались на
	// указанное значение
	//a) с помощью метода класса (оператор +=)
	//б) с помощью глобальной функции (оператор -=)
	//Проверьте корректность работы перегруженного оператора

	Point pt1(1,1);
	Point pt2(2,2);
	pt2+=pt1;
	pt2+=1;
	Point pt3(3,3);
    pt2+=pt1+=pt3;
	pt2 -= pt3;
	pt2 -= 50;
	stop


	//Задание 1c. Перегрузите оператор +/- 
	//a)с помощью методов класса (оператор +)
	//б) с помощью  глобальных функций (оператор -)
	//так, чтобы любая из закомментированных строк
	//кода выполнялась корректно
	Point pt11(1,1);
	Point pt12(2,2);
	Point pt13;

	pt13 = pt11 + 5;
	pt13 = 2 + pt11; //здесь работает только глобальная функция
	pt13 = pt11 + pt12;

	pt13 = pt11 - 5;
	pt13 = pt11 - pt12;
	stop

	//Задание 1d. Перегрузите унарный оператор +/- 
	pt13 = -pt11;
	pt13 = +pt11;




	//Задание 1d. Перегрузите оператор << (вывода в поток) для
	//класса MyString таким образом, чтобы при выполнении приведенной строки
	//на экран было выведено:
	//contents:  "QWERTY"

	MyString s("QWERTY");
	std::cout << "s= " << s << std::endl;

	//Задание 1е Перегрузите оператор + и += для класса MyString
	MyString s1("ABC"), s2("kkk");
	s1 +=s;
	std::cout << "s1= " << s1 << std::endl;

	s2 = s+s1;
	std::cout << "s2= " << s2 << std::endl;
	stop

	//Задание 2. Разработать "базу данных" о сотрудниках посредством ассоциативного
	//массива. Ключом является фамилия (ключ в задании уникален, поэтому нескольких Ивановых
	//в базе быть не может), а данными: пол, возраст, должность, зарплата...
	//Реализуйте:
	//добавление сотрудников в базу
	//исключение
	//вывод информации о конкретном сотруднике
	//вывод всей (или интересующей) информации о всех сотрудниках
	//Например:
		std::cout << "===========================================================\nЗадание 2. База данных.\n\n\n";


	{
		BD bd;	//создание пустой базы обязательно оператор индексирования и вывод на печать
	bd["Ivanov"] = MyData(MyData::MALE, 34, "Work", 10000.0);	//если Ivanov-а в базе еще нет, то
					//добавление, если уже есть, то замена его реквизитов
	bd["Petrova"] = MyData(MyData::FEMALE, 20, "Microsoft", 25000.0);
	bd["Sidirov"] = MyData(MyData::MALE, 40, "Apple inc.", 50000.0);
	std::cout << bd;	//вывод информации обо всех сотрудниках

	//А также:
	bd["Ivanov"] = MyData(MyData::MALE, 45, "Hobo", 0);
	//BD bdnew = bd;
	//bdnew = bd;
	std::cout << bd;	//вывод информации обо всех сотрудниках
   //А также можно вспомнить про семантику перемещения...

	// Очень нужно сделать оператор копирования и присваивания
	}
	stop
	return 0;
}//endmain

